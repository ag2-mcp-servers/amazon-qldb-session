# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T13:04:55+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, List, Optional

from pydantic import BaseModel, ConfigDict, Field, RootModel, constr


class AbortTransactionRequest(BaseModel):
    pass


class BadRequestException(RootModel[Any]):
    root: Any


class CapacityExceededException(RootModel[Any]):
    root: Any


class CommitDigest(RootModel[str]):
    root: str


class EndSessionRequest(BaseModel):
    pass


class InvalidSessionException(RootModel[Any]):
    root: Any


class IonBinary(RootModel[constr(min_length=1, max_length=131072)]):
    root: constr(min_length=1, max_length=131072)


class IonText(RootModel[constr(min_length=1, max_length=1048576)]):
    root: constr(min_length=1, max_length=1048576)


class LedgerName(
    RootModel[
        constr(
            pattern=r'(?!^.*--)(?!^[0-9]+$)(?!^-)(?!.*-$)^[A-Za-z0-9-]+$',
            min_length=1,
            max_length=32,
        )
    ]
):
    model_config = ConfigDict(
        regex_engine="python-re",
    )
    root: constr(
        pattern=r'(?!^.*--)(?!^[0-9]+$)(?!^-)(?!.*-$)^[A-Za-z0-9-]+$',
        min_length=1,
        max_length=32,
    )


class LimitExceededException(RootModel[Any]):
    root: Any


class OccConflictException(RootModel[Any]):
    root: Any


class PageToken(
    RootModel[constr(pattern=r'^[A-Za-z-0-9+/=]+$', min_length=4, max_length=1024)]
):
    root: constr(pattern=r'^[A-Za-z-0-9+/=]+$', min_length=4, max_length=1024)


class ProcessingTimeMilliseconds(RootModel[int]):
    root: int


class RateExceededException(RootModel[Any]):
    root: Any


class ReadIOs(RootModel[int]):
    root: int


class SessionToken(
    RootModel[constr(pattern=r'^[A-Za-z-0-9+/=]+$', min_length=4, max_length=1024)]
):
    root: constr(pattern=r'^[A-Za-z-0-9+/=]+$', min_length=4, max_length=1024)


class StartSessionRequest(BaseModel):
    LedgerName_1: LedgerName = Field(..., alias='LedgerName')


class StartTransactionRequest(BaseModel):
    pass


class Statement(RootModel[constr(min_length=1, max_length=100000)]):
    root: constr(min_length=1, max_length=100000)


class TimingInformation(BaseModel):
    ProcessingTimeMilliseconds_1: Optional[ProcessingTimeMilliseconds] = Field(
        None, alias='ProcessingTimeMilliseconds'
    )


class TransactionId(
    RootModel[constr(pattern=r'^[A-Za-z-0-9]+$', min_length=22, max_length=22)]
):
    root: constr(pattern=r'^[A-Za-z-0-9]+$', min_length=22, max_length=22)


class ValueHolder(BaseModel):
    IonBinary_1: Optional[IonBinary] = Field(None, alias='IonBinary')
    IonText_1: Optional[IonText] = Field(None, alias='IonText')


class ValueHolders(RootModel[List[ValueHolder]]):
    root: List[ValueHolder]


class WriteIOs(RootModel[int]):
    root: int


class XAmzTarget(Enum):
    QLDBSession_SendCommand = 'QLDBSession.SendCommand'


class AbortTransactionResult(BaseModel):
    TimingInformation_1: Optional[TimingInformation] = Field(
        None, alias='TimingInformation'
    )


class CommitTransactionRequest(BaseModel):
    CommitDigest_1: CommitDigest = Field(..., alias='CommitDigest')
    TransactionId_1: TransactionId = Field(..., alias='TransactionId')


class EndSessionResult(BaseModel):
    TimingInformation_1: Optional[TimingInformation] = Field(
        None, alias='TimingInformation'
    )


class FetchPageRequest(BaseModel):
    NextPageToken: PageToken
    TransactionId_1: TransactionId = Field(..., alias='TransactionId')


class IOUsage(BaseModel):
    ReadIOs_1: Optional[ReadIOs] = Field(None, alias='ReadIOs')
    WriteIOs_1: Optional[WriteIOs] = Field(None, alias='WriteIOs')


class Page(BaseModel):
    NextPageToken: Optional[PageToken] = None
    Values: Optional[ValueHolders] = None


class StartSessionResult(BaseModel):
    SessionToken_1: Optional[SessionToken] = Field(None, alias='SessionToken')
    TimingInformation_1: Optional[TimingInformation] = Field(
        None, alias='TimingInformation'
    )


class StartTransactionResult(BaseModel):
    TimingInformation_1: Optional[TimingInformation] = Field(
        None, alias='TimingInformation'
    )
    TransactionId_1: Optional[TransactionId] = Field(None, alias='TransactionId')


class StatementParameters(RootModel[List[ValueHolder]]):
    root: List[ValueHolder]


class CommitTransactionResult(BaseModel):
    CommitDigest_1: Optional[CommitDigest] = Field(None, alias='CommitDigest')
    ConsumedIOs: Optional[IOUsage] = None
    TimingInformation_1: Optional[TimingInformation] = Field(
        None, alias='TimingInformation'
    )
    TransactionId_1: Optional[TransactionId] = Field(None, alias='TransactionId')


class ExecuteStatementRequest(BaseModel):
    Parameters: Optional[StatementParameters] = None
    Statement_1: Statement = Field(..., alias='Statement')
    TransactionId_1: TransactionId = Field(..., alias='TransactionId')


class ExecuteStatementResult(BaseModel):
    ConsumedIOs: Optional[IOUsage] = None
    FirstPage: Optional[Page] = None
    TimingInformation_1: Optional[TimingInformation] = Field(
        None, alias='TimingInformation'
    )


class FetchPageResult(BaseModel):
    ConsumedIOs: Optional[IOUsage] = None
    Page_1: Optional[Page] = Field(None, alias='Page')
    TimingInformation_1: Optional[TimingInformation] = Field(
        None, alias='TimingInformation'
    )


class SendCommandRequest(BaseModel):
    AbortTransaction: Optional[AbortTransactionRequest] = None
    CommitTransaction: Optional[CommitTransactionRequest] = None
    EndSession: Optional[EndSessionRequest] = None
    ExecuteStatement: Optional[ExecuteStatementRequest] = None
    FetchPage: Optional[FetchPageRequest] = None
    SessionToken_1: Optional[SessionToken] = Field(None, alias='SessionToken')
    StartSession: Optional[StartSessionRequest] = None
    StartTransaction: Optional[StartTransactionRequest] = None


class SendCommandResult(BaseModel):
    AbortTransaction: Optional[AbortTransactionResult] = None
    CommitTransaction: Optional[CommitTransactionResult] = None
    EndSession: Optional[EndSessionResult] = None
    ExecuteStatement: Optional[ExecuteStatementResult] = None
    FetchPage: Optional[FetchPageResult] = None
    StartSession: Optional[StartSessionResult] = None
    StartTransaction: Optional[StartTransactionResult] = None
